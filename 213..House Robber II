
// Tabulation method

class Solution {
public:

 int rob1(vector<int>& nums) {
        if(nums.size()==1)
        return nums[0];
        vector<int>dp(nums.size(),0);
dp[nums.size()-1]=nums[nums.size()-1];
dp[nums.size()-2]=max(nums[nums.size()-1],nums[nums.size()-2]);
for(int i=nums.size()-3;i>=0;i--)
{
    dp[i]=max(dp[i+1],dp[i+2]+nums[i]);
}
return dp[0];
         
    }
    int rob(vector<int>& nums) {
        vector<int>v1,v2;
         int n=nums.size();
        if(n==1)
        return nums[0];
        for(int i=0;i<n;i++)
        {
if(i!=0) v1.push_back(nums[i]);
if(i!=n-1) v2.push_back(nums[i]);
        }
        return max(rob1(v1),rob1(v2));
    }
};



///////////////////////////////////

class Solution {
public:

   int solve1(vector<int> nums)
   {
       int n = nums.size();
       if(n==0) return 0;
       if(n==1) return nums[0];


      
       vector<int> dp(n+1,0);
       dp[1]=nums[0];
       for(int i=2;i<n+1;i++)
       {
           dp[i]=max(dp[i-1],dp[i-2]+nums[i-1]);
       }
      return dp[n];
   }

    int rob(vector<int>& nums) {
       int n=nums.size();
       if(n==0) return 0;
       if(n==1) return nums[0];


        //answer max(0 to n-2 to 1 to n-1);
        vector<int> nums1(nums.begin(),nums.end()-1);
        vector<int> nums2(nums.begin()+1,nums.end());
        int ans = max(solve1(nums1),solve1(nums2));
        return ans;
    }
};
